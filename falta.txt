// falta arrumar o F
F -> ( Expr )
F -> id
F -> numInt
F -> numFloat
F -> literal

// -------------------------------

Lembrar de sempre verificar se o identificador foi criado (pesquisar na tabela)

- Adicionar e pesquisar na tabela IDS
- Adicionar os erros
- Criar Arvore de Sintaxe Abstrata (para ajudar nos statements) -> https://duckduckgo.com/?t=ffab&q=how+to+build+abstract+sintax+tree+for+C&atb=v263-1&ia=web
- Adicionar padrão visitor na arvore


-----------------------------------


link materia: https://www.inf.ufrgs.br/~nicolas/pdf/Compiladores07-tabelas-ll1.pdf
link de teste: https://ll1-validator.netlify.app/
           	https://www.cs.princeton.edu/courses/archive/spring20/cos320/LL1/

STMT tratando id mas ignora os outros tipos
Não está aceitando expression







ProgramL ::= Array IdList'
ProgramL ::= ( FormaList ) { STMTL }

TypeDecl ::= typedef struct { Type IdList ; VarDecl } id ; TypeDecl

Type ::= long
Type ::= int
Type ::= float
Type ::= bool
Type ::= id
Type ::= char
Type ::= double

FormaList ::= Type Pointer id Array FormalRest
FormaList ::= ''

FormalRest ::= , FormaList
FormalRest ::= ''

Array ::= [ num ] Array
Array ::= ''

IdList ::= Pointer id Array IdList'
IdList' ::= , IdList
IdList' ::= ''


FatId ::= ( ExprList  ) ;
FatId ::=  IdList ;
FatId ::= FatId1 ;

FatId1 ::= dot Expr
FatId1 ::= arrow Expr
FatId1 ::= & Expr
FatId1 ::= = Expr
FatId1 ::= [ Expr ]

CaseBlock ::= case num : STMTL CaseBlock
CaseBlock ::= ''

ExprList ::= ExprListTail
ExprList ::= ''

ExprListTail ::= Expr ExprListTail'
ExprListTail :: ''

ExprListTail' ::= , ExprListTail
ExprListTail' ::= ''

F ::= ( Expr )
F ::= id
F ::= num
F ::= literal
F ::= true
F ::= false






